from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from loader import dp

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import aiogram.utils.markdown as fmt
from aiogram.utils.exceptions import BotBlocked

from config.config import admin_id

from keyboards.keyboard import key_cancel, key_confirm, key_k_0_del, key_k_1_del, main_menu_admin_1, main_menu_admin_2, key_k_0_add
from db.db_api import add_item, add_notify_article, del_active_user, del_item, del_notify_article, get_add_category_info, get_all_active_user_id, get_articles, get_del_callback, get_del_callback_articles, get_notify_article

#–°–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã/–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
async def set_keyboard(message: types.Message):
    if message.from_user.id == admin_id:
        await message.reply("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É</b>", reply_markup=main_menu_admin_2)
    else:
        pass

async def del_keyboard(message: types.Message):
    if message.from_user.id == admin_id:
        await message.reply("<b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞–¥–º–∏–Ω–∫—É</b>", reply_markup=main_menu_admin_1)
    else:
        pass

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
class AddState(StatesGroup):
    waiting_category = State()
    create_category = State()
    waiting_category_code = State()
    waiting_category_name = State()
    waiting_name = State()
    waiting_discription = State()
    waiting_avtor = State()
    waiting_link = State()
    article_post = State()

async def add_article(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("<b>–¢—ã –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π</b>", reply_markup=key_cancel())
        await message.answer("<b>–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏–º?</b>", reply_markup=key_k_0_add())
        await AddState.waiting_category.set()

async def add_article_get_category(call: types.CallbackQuery, state:FSMContext):    
    if call.data != "create_category":
        data = get_add_category_info(call.data)
        await state.update_data(category_name=data[0])
        await state.update_data(category_code=data[1])
        await call.message.answer(f"<b>–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é  {data[0]}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>")
        await call.answer()
        await AddState.waiting_name.set()
    else:
        await call.message.answer(f"<b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>")
        await AddState.waiting_category_name.set()

async def add_article_get_category_name(message: types.Message, state:FSMContext):
    await state.update_data(category_name=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª {message.text}  \n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>")
    await AddState.waiting_category_code.set()

async def add_article_get_category_code(message: types.Message, state:FSMContext):
    await state.update_data(category_code=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª {message.text}  \n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>")    
    await AddState.waiting_name.set()



async def add_article_get_name(message: types.Message, state:FSMContext):
    await state.update_data(article_name=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>")
    await AddState.waiting_discription.set()

async def add_article_get_discr(message: types.Message, state:FSMContext):
    await state.update_data(article_discr=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∞–≤—Ç–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–ª–∞:</b>")
    await AddState.waiting_avtor.set()

async def add_article_get_avtor(message: types.Message, state:FSMContext):
    await state.update_data(article_avtor=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –∞–≤—Ç–æ—Ä–∞ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É:</b>")
    await AddState.waiting_link.set()

async def add_article_get_link(message: types.Message, state:FSMContext):
    await state.update_data(article_link=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª —Å—Å—ã–ª–∫—É '{message.text}'\n\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>")
    user_data = await state.get_data()
    await message.answer(f"<b>{fmt.hide_link(user_data['article_link'])}{user_data['article_name']}\n\nüìö–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data['category_name']}\n\nüë®‚ÄçüöÄ–ê–≤—Ç–æ—Ä: {user_data['article_avtor']}\n\nüìú{user_data['article_discr']}</b>", reply_markup=key_confirm())
    await AddState.article_post.set()

async def add_article_confirm(message: types.Message, state:FSMContext):
    if message.text == "‚úÖ–ü–æ—Å—Ç–∏–º‚úÖ":
        user_data = await state.get_data()
        add_item(user_data['category_code'], user_data['category_name'], user_data['article_name'], user_data['article_avtor'], user_data['article_link'], user_data['article_discr'])
        await message.answer("<b>–ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!</b>", reply_markup=main_menu_admin_2)
        add_notify_article(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç {user_data['article_name']} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {user_data['category_name']}")
        await state.finish()
    if message.text == "‚ùé–û—Ç–º–µ–Ω–∞‚ùé":
        pass

async def add_article_cancel(message: types.Message, state:FSMContext):
    await message.answer("<b>–û—Ç–º–µ–Ω—è–µ–º...</b>", reply_markup=main_menu_admin_2)
    await state.finish()
#–∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ / –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
async def save_data(message: types.Message):
    await message.answer("<b>–°–æ—Ö—Ä–∞–Ω—è—é...</b>")
    raise SystemExit

#___________________–∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å_________________

async def btn_katalog(message: types.Message):
    await message.answer("<b>üç≠–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–∞—Ç–µ–π, –≤—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—åüç¢</b>", reply_markup=key_k_0_del())

#–û—Ç–∫—Ä—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def btn_kategory(call: types.CallbackQuery):
    data = call.data
    await call.message.edit_text("<b>üç≠–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–∞—Ç–µ–π, –≤—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—åüç¢</b>", reply_markup=key_k_1_del(data))
    await call.answer()

#–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def btn_article(call: types.CallbackQuery):
    key = call.data[call.data.find(":") + 1 : ]
    data = get_articles(key)
    name = data[0][3]
    kategory = data[0][2]
    await call.message.answer(f"<b>–ó–∞–ø–∏—Å—å '{name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {kategory}</b>")
    del_item(key)   

#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
async def btn_back_lvl0(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=key_k_0_del()) 
    await call.answer()

#_______________–ö–Ω–æ–ø–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_____________

class NotifyState(StatesGroup):
    send_notify = State()

async def btn_notify(message: types.Message):
    await message.answer("<b>–û —á–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", reply_markup=key_cancel())
    await NotifyState.send_notify.set()

async def send_notify(message: types.Message, state:FSMContext):
    user_id = get_all_active_user_id()
    counter = 0
    for id in user_id:
        try:
            await dp.bot.send_message(id, text=message.md_text, parse_mode="MarkdownV2")
            counter += 1
        except BotBlocked:
            del_active_user(id)
    await dp.bot.send_message(admin_id, f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>", reply_markup=main_menu_admin_2)
    await state.finish()

async def notify_cancel(message: types.Message, state:FSMContext):
    await message.answer("<b>–û—Ç–º–µ–Ω—è–µ–º...</b>", reply_markup=main_menu_admin_2)
    await state.finish()

async def get_db(message: types.Message):
    doc = open('cryptolibs.db', 'rb')
    print(datetime.today())
    await message.answer_document(document=doc, caption=f"{datetime.today()}")




#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(set_keyboard, Text(equals="üçí–ê–¥–º–∏–Ω–∫–∞‚û°Ô∏è"))
    dp.register_message_handler(del_keyboard, Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥üçí"))
    dp.register_message_handler(save_data, Text(equals="üì®–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µüì®"))
    dp.register_message_handler(get_db, Text(equals="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ë–î‚öôÔ∏è"))

    dp.register_message_handler(add_article, Text(equals="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"), state="*")
    dp.register_message_handler(add_article_cancel, Text(equals=("‚ùé–û—Ç–º–µ–Ω–∞", "‚ùé–û—Ç–º–µ–Ω–∞‚ùé")), state="*")
    dp.register_callback_query_handler(add_article_get_category, state=AddState.waiting_category)
    dp.register_message_handler(add_article_get_name, state= AddState.waiting_name)
    dp.register_message_handler(add_article_get_discr, state=AddState.waiting_discription)
    dp.register_message_handler(add_article_get_avtor, state=AddState.waiting_avtor)
    dp.register_message_handler(add_article_get_link, state=AddState.waiting_link)
    dp.register_message_handler(add_article_confirm, state=AddState.article_post)
    dp.register_message_handler(add_article_get_category_code, state=AddState.waiting_category_code)
    dp.register_message_handler(add_article_get_category_name, state=AddState.waiting_category_name)

    dp.register_message_handler(btn_katalog, Text(equals="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ"))
    dp.register_callback_query_handler(btn_kategory, Text(equals=get_del_callback()))
    dp.register_callback_query_handler(btn_article, Text(equals=get_del_callback_articles()))
    dp.register_callback_query_handler(btn_back_lvl0, Text(equals="del_back_to_lvl_0"))

    dp.register_message_handler(btn_notify, Text(equals="üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüîî"), state="*")
    dp.register_message_handler(send_notify, state=NotifyState.send_notify)
    dp.register_message_handler(notify_cancel, Text(equals="‚ùé–û—Ç–º–µ–Ω–∞"), state="*")




async def on_startup_notify(dp: Dispatcher):
    await dp.bot.send_message(admin_id, "<b>üôÉ–ë–∞—Ç—å, —è –ø—Ä–æ—Å–Ω—É–ª—Å—èüò¥/–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>")
    data = get_notify_article()
    user_id = get_all_active_user_id()
    for id in user_id:
        for item in data:
            try:
                await dp.bot.send_message(id, text=f"<b>{item}</b>")
            except BotBlocked:
                del_active_user(id)
    del_notify_article()

async def on_shutdown_notify(dp: Dispatcher):
    await dp.bot.send_message(admin_id, "<b>ü§¨–û–ø—è—Ç—å —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è –∏ —É–ø–∞–ªü§Ø</b>")