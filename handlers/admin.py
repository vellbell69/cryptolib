from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from handlers.client import btn_cancel
from keyboards.katalog import add_category_kb, article_kb_del, category_kb_del, confirm_key, del_category_kb
from loader import dp

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import aiogram.utils.markdown as fmt
from aiogram.utils.exceptions import BotBlocked

from config.config import admin_id

from keyboards.keyboard import key_cancel, main_menu_admin_1, main_menu_admin_2
from db.db_api import article_add, article_del, category, category_add, category_del, del_active_user, get_all_active_user_id

#–°–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã/–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
async def set_keyboard(message: types.Message):
    if message.from_user.id == admin_id:
        await message.reply("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É</b>", reply_markup=main_menu_admin_2)
    else:
        pass

async def del_keyboard(message: types.Message):
    if message.from_user.id == admin_id:
        await message.reply("<b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞–¥–º–∏–Ω–∫—É</b>", reply_markup=main_menu_admin_1)
    else:
        pass

#_______________–ö–Ω–æ–ø–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_____________

class NotifyState(StatesGroup):
    send_notify = State()

async def btn_notify(message: types.Message):
    await message.answer("<b>–û —á–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", reply_markup=key_cancel())
    await NotifyState.send_notify.set()

async def send_notify(message: types.Message, state:FSMContext):
    user_id = get_all_active_user_id()
    counter = 0
    for id in user_id:
        try:
            await dp.bot.send_message(id, text=message.md_text, parse_mode="MarkdownV2")
            counter += 1
        except BotBlocked:
            del_active_user(id)
    await dp.bot.send_message(admin_id, f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {counter} —Å–æ–æ–±—â–µ–Ω–∏–π</b>", reply_markup=main_menu_admin_2)
    await state.finish()

async def cancel(message: types.Message, state:FSMContext):
    await message.answer("<b>–û—Ç–º–µ–Ω—è–µ–º...</b>", reply_markup=main_menu_admin_2)
    await state.finish()

async def get_db(message: types.Message):
    doc = open('db\cryptolibs.db', 'rb')
    print(datetime.today())
    await message.answer_document(document=doc, caption=f"{datetime.today()}")
    

#___________________________________–†–æ–±–æ—Ç–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º___________________________________________
class AddCategoryState(StatesGroup):
    get_name = State()

async def add_category_start(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=key_cancel())
        await AddCategoryState.get_name.set()

async def add_category(message: types.Message, state:FSMContext):
    name = message.text
    category_add(name)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {name} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞", reply_markup=main_menu_admin_2)
    await state.finish()

async def del_category_start(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–¥–∞–ª–∏—Ç—å", reply_markup=del_category_kb())

async def del_category(call: types.CallbackQuery):
    category_del(call.data[call.data.find(":") + 1 : ])
    await call.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
class AddArticleState(StatesGroup):
    waiting_category = State()
    waiting_name = State()
    waiting_discription = State()
    waiting_avtor = State()
    waiting_link = State()
    article_post = State()


async def add_article_start(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–¢—ã –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π", reply_markup=key_cancel())
        await message.answer("–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏–º", reply_markup=add_category_kb())
        await AddArticleState.waiting_category.set()

async def add_article_get_category(call: types.CallbackQuery, state:FSMContext):
    category_code = call.data[call.data.find(":") + 1 : ]
    await state.update_data(category_code=category_code)
    await call.message.answer(f"<b>–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_code}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>")
    await call.answer()
    await AddArticleState.waiting_name.set()

async def add_article_get_name(message: types.Message, state:FSMContext):
    await state.update_data(article_name=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>")
    await AddArticleState.waiting_discription.set()

async def add_article_get_discr(message: types.Message, state:FSMContext):
    await state.update_data(article_discr=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∞–≤—Ç–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–ª–∞:</b>")
    await AddArticleState.waiting_avtor.set()

async def add_article_get_avtor(message: types.Message, state:FSMContext):
    await state.update_data(article_avtor=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª –∞–≤—Ç–æ—Ä–∞ '{message.text}'\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É:</b>")
    await AddArticleState.waiting_link.set()

async def add_article_get_link(message: types.Message, state:FSMContext):
    await state.update_data(article_link=message.text)
    await message.answer(f"<b>–¢—ã –≤–≤—ë–ª —Å—Å—ã–ª–∫—É '{message.text}'\n\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>")
    user_data = await state.get_data()
    await message.answer(f"<b>{fmt.hide_link(user_data['article_link'])}{user_data['article_name']}\n\nüë®‚ÄçüöÄ–ê–≤—Ç–æ—Ä: {user_data['article_avtor']}\n\nüìú{user_data['article_discr']}</b>", reply_markup=confirm_key())
    await AddArticleState.article_post.set()

async def add_article_confirm(message: types.Message, state:FSMContext):
    if message.text == "‚úÖ–ü–æ—Å—Ç–∏–º‚úÖ":
        user_data = await state.get_data()
        article_add(user_data['category_code'], user_data['article_name'], user_data['article_avtor'], user_data['article_discr'], user_data['article_link'])
        await message.answer("<b>–ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!</b>", reply_markup=main_menu_admin_2)
        await state.finish()

#–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def btn_catalog_del(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –∑–∞–ø–∏—Å—å —É–¥–∞–ª–∏—Ç—å", reply_markup=category_kb_del())

async def btn_category_del(call: types.CallbackQuery):
    category_id = call.data
    await call.message.edit_reply_markup(reply_markup=article_kb_del(category_id))
    await call.answer()

async def btn_article_del(call: types.CallbackQuery):
    article_id = call.data[call.data.find(":") + 1 : ]
    article_del(article_id)
    await call.message.answer("–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!")

async def btn_back_lvl_0(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=category_kb_del())

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(set_keyboard, Text(equals="üçí–ê–¥–º–∏–Ω–∫–∞‚û°Ô∏è"))
    dp.register_message_handler(del_keyboard, Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥üçí"))
    dp.register_message_handler(get_db, Text(equals="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ë–î‚öôÔ∏è"))

    dp.register_message_handler(btn_notify, Text(equals="üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µüîî"), state="*")
    dp.register_message_handler(send_notify, state=NotifyState.send_notify)
    dp.register_message_handler(cancel, Text(equals="‚ùé–û—Ç–º–µ–Ω–∞"), state="*")

    dp.register_message_handler(add_category_start, Text(equals="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ûï"))
    dp.register_message_handler(add_category, state=AddCategoryState.get_name)

    dp.register_message_handler(del_category_start, Text(equals="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚ûñ"))
    dp.register_callback_query_handler(del_category, Text(equals=category("call_del")))

    dp.register_message_handler(add_article_start, Text(equals="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"), state="*")
    dp.register_callback_query_handler(add_article_get_category, state=AddArticleState.waiting_category)
    dp.register_message_handler(add_article_get_name, state= AddArticleState.waiting_name)
    dp.register_message_handler(add_article_get_discr, state=AddArticleState.waiting_discription)
    dp.register_message_handler(add_article_get_avtor, state=AddArticleState.waiting_avtor)
    dp.register_message_handler(add_article_get_link, state=AddArticleState.waiting_link)
    dp.register_message_handler(add_article_confirm, state=AddArticleState.article_post)

    dp.register_message_handler(btn_catalog_del, Text(equals="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"))
    dp.register_callback_query_handler(btn_category_del, Text(startswith="article_del:"))
    dp.register_callback_query_handler(btn_article_del, Text(startswith="article_del_call:"))
    dp.register_callback_query_handler(btn_back_lvl_0, Text(equals="back_to_lvl_0_del"))

async def on_startup_notify(dp: Dispatcher):
    await dp.bot.send_message(admin_id, "<b>üôÉ–ë–∞—Ç—å, —è –ø—Ä–æ—Å–Ω—É–ª—Å—èüò¥/–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>")

async def on_shutdown_notify(dp: Dispatcher):
    await dp.bot.send_message(admin_id, "<b>ü§¨–û–ø—è—Ç—å —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è –∏ —É–ø–∞–ªü§Ø</b>")